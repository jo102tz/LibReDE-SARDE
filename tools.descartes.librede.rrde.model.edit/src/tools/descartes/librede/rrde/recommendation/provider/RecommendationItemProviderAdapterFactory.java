/**
 */
package tools.descartes.librede.rrde.recommendation.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tools.descartes.librede.rrde.recommendation.util.RecommendationAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RecommendationItemProviderAdapterFactory extends RecommendationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RecommendationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.RecommendationTrainingConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecommendationTrainingConfigurationItemProvider recommendationTrainingConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.RecommendationTrainingConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecommendationTrainingConfigurationAdapter() {
		if (recommendationTrainingConfigurationItemProvider == null) {
			recommendationTrainingConfigurationItemProvider = new RecommendationTrainingConfigurationItemProvider(this);
		}

		return recommendationTrainingConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.RecommendationAlgorithmSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecommendationAlgorithmSpecifierItemProvider recommendationAlgorithmSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.RecommendationAlgorithmSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecommendationAlgorithmSpecifierAdapter() {
		if (recommendationAlgorithmSpecifierItemProvider == null) {
			recommendationAlgorithmSpecifierItemProvider = new RecommendationAlgorithmSpecifierItemProvider(this);
		}

		return recommendationAlgorithmSpecifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.FeatureExtractorSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureExtractorSpecifierItemProvider featureExtractorSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.FeatureExtractorSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureExtractorSpecifierAdapter() {
		if (featureExtractorSpecifierItemProvider == null) {
			featureExtractorSpecifierItemProvider = new FeatureExtractorSpecifierItemProvider(this);
		}

		return featureExtractorSpecifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.DataSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSetItemProvider dataSetItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.DataSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSetAdapter() {
		if (dataSetItemProvider == null) {
			dataSetItemProvider = new DataSetItemProvider(this);
		}

		return dataSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.FeatureVector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureVectorItemProvider featureVectorItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.FeatureVector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureVectorAdapter() {
		if (featureVectorItemProvider == null) {
			featureVectorItemProvider = new FeatureVectorItemProvider(this);
		}

		return featureVectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.StatisticalFeatures} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatisticalFeaturesItemProvider statisticalFeaturesItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.StatisticalFeatures}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatisticalFeaturesAdapter() {
		if (statisticalFeaturesItemProvider == null) {
			statisticalFeaturesItemProvider = new StatisticalFeaturesItemProvider(this);
		}

		return statisticalFeaturesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tools.descartes.librede.rrde.recommendation.DecisionTreeAlgorithmSpecifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionTreeAlgorithmSpecifierItemProvider decisionTreeAlgorithmSpecifierItemProvider;

	/**
	 * This creates an adapter for a {@link tools.descartes.librede.rrde.recommendation.DecisionTreeAlgorithmSpecifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionTreeAlgorithmSpecifierAdapter() {
		if (decisionTreeAlgorithmSpecifierItemProvider == null) {
			decisionTreeAlgorithmSpecifierItemProvider = new DecisionTreeAlgorithmSpecifierItemProvider(this);
		}

		return decisionTreeAlgorithmSpecifierItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (recommendationTrainingConfigurationItemProvider != null) recommendationTrainingConfigurationItemProvider.dispose();
		if (recommendationAlgorithmSpecifierItemProvider != null) recommendationAlgorithmSpecifierItemProvider.dispose();
		if (featureExtractorSpecifierItemProvider != null) featureExtractorSpecifierItemProvider.dispose();
		if (dataSetItemProvider != null) dataSetItemProvider.dispose();
		if (featureVectorItemProvider != null) featureVectorItemProvider.dispose();
		if (statisticalFeaturesItemProvider != null) statisticalFeaturesItemProvider.dispose();
		if (decisionTreeAlgorithmSpecifierItemProvider != null) decisionTreeAlgorithmSpecifierItemProvider.dispose();
	}

}
